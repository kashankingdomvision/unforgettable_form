    public function creat_currency(Request $request)
    {

        if ($request->isMethod('post')) {
      

            // $request->validate(['currency' => 'required|unique:currencies,code'], ['required' => 'Currency is required']);

            // dd($request->currency);


            //-- add new currency in currenvy table 

                $new_currency = AllCurrency::where('code',$request->currency)->first();

                $currency = new Currency;
                $currency->name       = $new_currency->name;
                $currency->code       = $new_currency->code;
                $currency->isObsolete = $new_currency->isObsolete;
                $currency->flag       = $new_currency->flag;
                $currency->save();

            //-- end

            //-- creating possibilty of already added currency with new currency from(old_currency) - to(new_currency)

                $existing_currencies   = CurrencyConversions::groupBy('from')->get(['from']);
            
                foreach($existing_currencies as $key => $existing_currency ){

                    $cc       = new CurrencyConversions;
                    $cc->from = $existing_currency->from;
                    $cc->to   = $new_currency->code;
                    $cc->save();
                }
                
            //-- end

            //-- creating possibilty of already added currency with new currency from(new_currency) - to(old_currency)

                $all_currencies = Currency::all();

                foreach($all_currencies as $key => $all_currency ){

                    $cc       = new CurrencyConversions;
                    $cc->from = $currency->code;
                    $cc->to   = $all_currency->code;
                    $cc->save();
                }

            //-- end


            //-- updating cuurency rate of new added currencies

                $values = CurrencyConversions::whereNull('value')->count();
                $from   = CurrencyConversions::whereNull('value')->pluck('from');
                $to     = CurrencyConversions::whereNull('value')->pluck('to');

                for($i=0 ; $i<$values; $i++){

                    $url = "https://free.currencyconverterapi.com/api/v6/convert?q=$from[$i]_$to[$i]&compact=ultra&apiKey=9910709386be4f00aa5b";
                    $output2 =  json_decode($this->curl_data($url));
                    $key = "$from[$i]_$to[$i]";
        
                    CurrencyConversions::where('from',"$from[$i]")->where('to',"$to[$i]")->update(['value' => floatval($output2->{$key}) ]); 
                }

            //-- end

            dd("done");
        }


        
        return view('currency.create')->with([ 'all_currencies' => AllCurrency::all() ]);
    }